<style>
    .overlay {
        position: fixed; /* Positioning and size */
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(128,128,128,0.5); /* color */
        display: none; /* making it hidden by default */
    }

    .toast-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
        background-color: lightgray;
    }

    .toast {
        width: 400px;
    }
</style>

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}


<div class="overlay @showClass">
    <div class="toast-container p-3 m-auto @showClass" data-bs-autohide="true" data-bs-delay="5000">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Edit Workspace</strong>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            </div>

            <div class="toast-body">
                <EditForm Model="SelectedWorkspace" OnValidSubmit="Submit" FormName="EditWorkspaceForm" width="500px">


                    <p>Workspace Id: @SelectedWorkspace.Id</p>
                    <p>User Id: @SelectedWorkspace.KUserId</p>

                    <label>
                        Name: <InputText @bind-Value="SelectedWorkspace!.Name" />
                    </label>
                    <div class="row p-1 mt-2">
                        <button class="btn btn-success col p-2" type="submit">Save</button>
                        <button class="btn btn-secondary col p-2" @onclick="Close">Cancel</button>
                        <button class="btn btn-danger col" @onclick="DeleteWorkspace">Delete</button>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public KUser? User { get; set; }

    [CascadingParameter] public KWorkspace? SelectedWorkspace { get; set; }

    [Parameter] public bool IsVisible { get; set; }

    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }


    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private async Task Submit()
    {
        StateHasChanged();
        Close();
    }

    private async Task DeleteWorkspace()
    {
        User.Workspaces.Remove(SelectedWorkspace);
        StateHasChanged();
        Close();
    }
}



