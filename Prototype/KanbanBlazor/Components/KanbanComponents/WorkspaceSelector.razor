@attribute [StreamRendering]
@rendermode InteractiveServer

@if (!User.Workspaces.Any()) {
    <p>Loading Workspaces...</p>
}
else {
    <div class="p-1 m-1">
        <select @onchange="HandleWorkspaceChange" class="form-select w-auto">
            <option value="">Select a Workspace</option>
            @foreach (var workspace in User.Workspaces)
            {
                <option value="@workspace.Id">@workspace.Name</option>
            }
            <option value="newWorkspace">Add New Workspace</option>
        </select>
    </div>
}
@if (SelectedWorkspace.KUserId != null) {
    <CascadingValue Value="@User">
        <CascadingValue Value="@SelectedWorkspace">
            <BoardSelector />
        </CascadingValue>
    </CascadingValue>

    <CascadingValue Value="@User">
        <CascadingValue Value="@SelectedWorkspace">
            <WorkspaceModal @ref="WorkspaceModal" />
        </CascadingValue>
    </CascadingValue>
}
        



@code {
    [CascadingParameter] public KUser? User { get; set; }
    [CascadingParameter] public KWorkspace SelectedWorkspace { get; set; } = new KWorkspace();
    public WorkspaceModal? WorkspaceModal;

    

    private void HandleWorkspaceChange(ChangeEventArgs e) {
        var w_id = e.Value?.ToString();
        SelectedWorkspace = User?.Workspaces.FirstOrDefault(a => a.Id.Equals(w_id)) ?? new KWorkspace();
        switch (w_id) {
            case "":
                SelectedWorkspace = new KWorkspace();
                SelectedWorkspace.KUserId = User?.Id;
                break;
            case "newWorkspace":
                SelectedWorkspace = new KWorkspace();
                SelectedWorkspace.KUserId = User?.Id;
                CreateNewWorkspace();
                break;
            
        }
    }

    private async Task CreateNewWorkspace() {
        WorkspaceModal!.Show();
        while (WorkspaceModal.IsVisible) {
            await Task.Delay(100);
        }
        StateHasChanged();
    }




}