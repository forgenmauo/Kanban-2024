@page "/kanban-refactored"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]


<PageTitle>Kanban</PageTitle>

<KDataLoader User="@User" OnDataLoaded="HandleDataLoaded" />

@if (Loaded == false)
{
    <p>Loading Your Data...</p>
}
else
{
    <CascadingValue Value="@User">
            <div class="container horizontal-scrollable">
                <div class="row">
                <div class="col-md-4">
                        <KWorkspaceSelector OnWorkspaceChanged="HandleWorkspaceChanged" />
                    </div>
                <div class="col-md-4">
                        <KBoardSelector SelectedWorkspace="@SelectedWorkspace" OnBoardChanged="HandleBoardChanged" />
                    </div>
                </div>
            </div>
            <KBoardComponent SelectedBoard="@SelectedBoard" />
    </CascadingValue>
}
@code {
    [Inject] public IDataAccess? DataAccess { get; set; }

    [CascadingParameter] public KUser? User { get; set; } = new KUser();

    public KWorkspace? SelectedWorkspace { get; set; } = new KWorkspace();
    public KBoard? SelectedBoard { get; set; } = new KBoard();

    public string? UserId { get; set; } = "";
    public string? Email { get; set; } = "";
    public bool? Loaded { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await GetAppUserData();
    }

    public async Task GetAppUserData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        User.Id = user.FindFirstValue(ClaimTypes.NameIdentifier);
        User.UserName = user.FindFirstValue(ClaimTypes.Name);
        User.Email = user.FindFirstValue(ClaimTypes.Email).ToUpper();
    }

    public async Task HandleDataLoaded(KUser user)
    {
        User = user;
        Loaded = true;
    }

    public async Task HandleWorkspaceChanged(KWorkspace workspace)
    {
        SelectedWorkspace = workspace;
    }

    public async Task HandleBoardChanged(KBoard board)
    {
        SelectedBoard = board;
    }
}
