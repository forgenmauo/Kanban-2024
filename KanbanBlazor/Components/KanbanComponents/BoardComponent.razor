@attribute [StreamRendering]
@rendermode InteractiveServer
<script>
    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        ev.target.appendChild(document.getElementById(data));
    }
</script>

@if (SelectedBoard.KWorkspaceId != null) {
    <div class="container vh-100">
        <div class="row h-75">
            @foreach (var column in SelectedBoard!.Columns)
            {
                <div class="card col-md-3 d-flex flex-column p-1 m-1 border-1 bg-light" id="div1" ondrop="drop(event)" ondragover="allowDrop(event)">
                    <div class="card-header border-1">
                        <div class="d-flex justify-content-between">
                            <h4>@column.Name</h4>
                            <button class="btn btn-light float-end" @onclick="(() => UpdateColumn(column))">...</button>
                        </div>
                    </div>

                    <div class="card-body d-flex flex-column">
                        @foreach (var task in column.Tasks)
                        {
                            <div class="card p-1 m-1 border-1" id="drag1" draggable="true" ondragstart="drag(event)">
                                    <table class="table">
                                        <tr>
                                            <td><h4>@task.Name</h4></td>
                                            <td>
                                                <button class="btn btn-light float-end w-100 border-0" @onclick="(() => UpdateTask(task))">...</button>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="2">@task.Description</td>
                                        </tr>
                                    </table>

                            </div>
                            
                        }
                    
                    </div>
                    @if (column.Name == "Todo")
                    {
                        <div class="card-footer mt-auto">
                            <button class="btn btn-primary w-100" @onclick="AddTask">Add Task</button>
                        </div>
                    } 
                </div>
            
            }
            <div class="col-1">
                <button class="btn btn-primary pt-1 mt-1 w-50" @onclick="AddColumn">+</button>
            </div>
        </div>
    </div>
}
<CascadingValue Value="@User">
    <CascadingValue Value="@SelectedColumn">
        <ColumnModal @ref="ColumnModal" />
    </CascadingValue>
</CascadingValue>

<CascadingValue Value="@User">
    <CascadingValue Value="@SelectedTask">
        <TaskModal @ref="TaskModal" />
    </CascadingValue>
</CascadingValue>

<CascadingValue Value="@User">
    <CascadingValue Value="@SelectedTask">
        <EditTaskModal @ref="EditTaskModal" />
    </CascadingValue>
</CascadingValue>

<CascadingValue Value="@User">
    <CascadingValue Value="@SelectedColumn">
        <EditColumnModal @ref="EditColumnModal" />
    </CascadingValue>
</CascadingValue>



@code {
    [CascadingParameter] public KUser? User { get; set; }
    [CascadingParameter] public KBoard SelectedBoard { get; set; }
    [CascadingParameter] public KColumn SelectedColumn { get; set; } = new KColumn();
    [CascadingParameter] public KTask? SelectedTask { get; set; } = new KTask();

    public ColumnModal? ColumnModal;
    public TaskModal? TaskModal;
    public EditTaskModal? EditTaskModal;
    public EditColumnModal? EditColumnModal;

    private async Task AddTask()
    {
        SelectedTask = new KTask();
        SelectedTask.KColumnId = SelectedBoard.Columns[0].Id;
        TaskModal.Show();
        while (TaskModal.IsVisible)
        {
            await Task.Delay(100);
        }
        StateHasChanged();
    }

    private async Task AddColumn()
    {
        SelectedColumn = new KColumn();
        SelectedColumn.KBoardId = SelectedBoard.Id;

        ColumnModal.Show();
        while (ColumnModal.IsVisible)
        {
            await Task.Delay(100);
        }
        StateHasChanged();
    }

    private async Task UpdateTask(KTask task)
    {
        SelectedTask = task;
        EditTaskModal.Show();
        while (EditTaskModal.IsVisible)
        {
            await Task.Delay(100);
        }
        StateHasChanged();
    }

    private async Task UpdateColumn(KColumn column)
    {
        SelectedColumn = column;
        EditColumnModal.Show();
        while (ColumnModal.IsVisible)
        {
            await Task.Delay(100);
        }
        StateHasChanged();
    }
}
